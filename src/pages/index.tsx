import { Clock, Wallet1 } from 'iconsax-react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import DiscourseLongList from '../components/cards/DiscourseLongList'
import Layout from '../components/layout/Layout'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { useSelector } from 'react-redux'
import { useQuery } from '@apollo/client'
import { GET_DISCOURSES } from '../lib/queries'
import { RootState } from '../store'
import LoadingSpinner from '../components/utils/LoadingSpinner'
import ConnectWalletDailog from '../components/dialogs/ConnectWalletDailog'
import TopBar from '../components/topbar/TopBar'
import useLoginCheck from '../hooks/useLoginCheck'


const Home: NextPage = () => {
	const route = useRouter();
	const { initWin } = useLoginCheck(window as any);
	// const dispatch = useDispatch();

	// const [walletAddress, setWalletAddress] = useState('');
	// const [connectingWallet, setConnectingWallet] = useState(false);

	// const [refreshToken, { data: refreshTokenData }] = useMutation(REFRESH_TOKEN);
	const user = useSelector((state: RootState) => state.user);
	const [ openConnectWallet, setOpenConnectWallet ] = useState(false);

	useEffect(() => {
		if (window && (window as any).ethereum) {
			initWin(window as any);
		}
	}, [])
	
	const { loading: dLoading, error: dError, data: dData } = useQuery(GET_DISCOURSES);

	return (
		<div className="w-full h-screen ">
			<Head>
				<title>Discourses by AGORA SQUARE</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/discourse_logo_fav.svg" />
			</Head>

			<Layout >
				<div className='w-32 h-32 bg-gradient rounded-full blur-3xl fixed top-24 right-[25vw] z-0' />

				

				<div className='w-full min-h-screen flex flex-col py-10 px-4 sm:px-0 gap-4 z-10'>


					{/* TopSection */}

					<TopBar />

					{/* Body */}
					<div className='w-full bg-card items-center px-10 py-8 rounded-xl mt-8 flex justify-between'>
						<div className='flex flex-col gap-1'>
							<h3 className='text-white font-semibold'>Start a Discourse</h3>
							<p className='text-white/40 font-medium text-xs'>Invite speakers to your discourse from Twitter!</p>
							{ !user.isLoggedIn && <>
								<ConnectWalletDailog open={openConnectWallet} setOpen={setOpenConnectWallet} />
								{/* <button onClick={() =>  setOpenConnectWallet((prev: boolean) =>  )} className='text-blue-500 w-max text-sm font-medium mt-4' >Create one &rarr;</button> */}
								</>
								}
							<button onClick={() => { if (user.isLoggedIn) route.push('/create'); else setOpenConnectWallet((prev: boolean) => !prev); }} className='text-blue-500 w-max text-sm font-medium mt-4' >Create one &rarr;</button>
						</div>
						<img src="/discourse_g1.png" alt="" />
					</div>

					{/* explore */}
					{ dData && dData.getDiscourses.length != 0 && <nav className='flex items-center justify-between py-4 px-2'>
						<div className='flex flex-col gap-1'>
							<h3 className='text-white font-semibold'>Explore</h3>
							<p className='text-white/40 font-medium text-xs hidden sm:flex'>Listen in to the most interesting discourses on web3</p>
						</div>

						{ 
							<button className='text-blue-500 w-max text-xs font-medium mt-4' >Show all</button>}
					</nav>}
					{/* list */}
					<div className='w-full flex flex-col items-center gap-2'>

						{
							dData && dData.getDiscourses.length > 0 &&
							[].concat(dData.getDiscourses).sort(
								(a: any, b: any) => +b.initTS - +a.initTS
							).map((data: any) => (
								<DiscourseLongList state={0} key={data.id} data={data} />
							))
						}

						{
							dData && dData.getDiscourses.length == 0 &&
							<div className='w-full py-4 flex items-center justify-center mt-10'>
								<img className='w-36' src="/404_discourses.png" alt="" />
							</div>
						}

						{
							dLoading &&
							<div className='w-full py-4 flex items-center justify-center'>
								<LoadingSpinner strokeColor='#ffffff' />
							</div>
						}

						{
							dError &&
							<div className='w-full py-4 flex items-center justify-center'>
								<p className='text-white/30 text-sm'>Error gettting Discourses</p>
							</div>
						}

					</div>

				</div>
			</Layout>

		</div>
	)
}

export default Home
